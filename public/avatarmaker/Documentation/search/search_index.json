{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Introduction \u00b6 Thank You for purchasing the AvatarMaker. In this document, we will guide you through the basic setup of your new web application. The Quick Start chapter is targeted toward users without any programming knowledge and represents a simple out-of-the-box installation. The other sections require at least some basic concepts of PHP For any question or bug report leave a comment on the item page or feel free to contact us at inochiteam@gmail.com we will answer as soon as possible. Remember to rate \u2b50\u2b50\u2b50\u2b50\u2b50 on CodeCanyon! It will help us a lot. Note If you find a security vulnerability, please communicate with us privately to reduce the possibility of endangering other users Server Requirements \u00b6 PHP 7.x - 8.x PHP GD or Imagick installed and properly configured Writing permissions for at least the cache folder Attention The AvatarMaker does work with PHP 5.x but we don't offer support for deprecated language versions. Please update your server to the lastest available version as soon as possibile to improve speed and security. Changelog \u00b6 Version 3.3.0 - Lara \ud83d\udc71\u200d\u2640\ufe0f - [29/10/2022] \u00b6 Added featured items Substituted Grunt with Webpack Updated build dependencies Updated jQuery to 3.6.1 Removed legacy skins Updated the documentation Version 3.3.0 - Allison \ud83d\udc69\u200d\ud83c\udf3e - [06/09/2020] \u00b6 Fixed bug V3234C: UI crash if head layer has no colors palette Fixed bug V3233C: UI crash if there was no head layer defined Fixed bug V3232C: Progress bar goes beyond 100% if the number of layers is more that the default ones Fixed broken links in the documentation Fixed wrong email in readme Updated jQuery to 3.5.1 Updated Grunt and Grunt Uglify Replaced Ruby Sass with Node Sass Improved offline documentation browsing experience Updated documentation to reflect Sass compiler change Version 3.2.3 - Elsie \ud83d\udc69\u200d\ud83d\udd27 - [20/04/2020] \u00b6 Fixed bug V3231C: Black previews on startup Version 3.2.2 - Elsie \ud83d\udc69\u200d\ud83d\udd27 - [08/01/2019] \u00b6 Added the ability to edit saved avatars in the UI Version 3.2.1 - Elsie \ud83d\udc69\u200d\ud83d\udd27 - [17/10/2018] \u00b6 Improved performances for not colored layers Version 3.2 - Elsie \ud83d\udc69\u200d\ud83d\udd27 - [04/09/2018] \u00b6 Added custom color selection in the UI Documentation updated with minimum system requirements Removed external CDNs to avoid GDPR issues Fixed bug V3201C: Missing words in some translations Version 3.1 - Maeve \ud83d\udc83\ud83c\udfff - [04/06/2018] \u00b6 Added support for non-square avatars Added 5 new faces Added 2 new background Added 1 new eyebrows All Objects have been redrawn from scratch Optimized and upscaled avatar source file Optimized color selection in the UI Optimized debugging The Cache is now regenerated after changes to the configuration file Added Gruntfile and package.json Reformatted SCSS code Version 3.0.2 - Zoe \ud83d\udc08 - [25/03/2018] \u00b6 Added the possibility to disable the background options the UI to output transparent images Added FAQ in the documentation to help with folder and file permissions Added a Code Reference section in the documentation to help including the AM into an existing code Improved interoperability with existing code when saving the avatar Version 3.0.1 - Zoe \ud83d\udc08 - [22/02/2018] \u00b6 Added 7 new hairstyles (Requested by a user) Added 2 new mouths (Requested by a user) Version 3.0 - Zoe \ud83d\udc08 - [16/01/2018] \u00b6 Backend and frontend rewritten from scratch New Client-side preview New languages Arab (AR), Hebrew (HE), French (FR) New assets New REST API New loader with progress bar Backgrounds are now a category like the others Avatar dimensions increased to 1024x1024px Added support for ImageMagick Version 2.2 - Merlin \ud83d\udd76 - [14/12/2017] \u00b6 Fixed Bug V2101C: Empty items previews when the UI and the cache folder where not in the same directory Version 2.1 - Galahad \ud83d\udd76 - [02/11/2017] \u00b6 Fixed Bug V2001C: The random function didn't work as intended Version 2.0 - Eva \ud83d\udc57 - [18/07/2016] \u00b6 New responsive interface customizable through scss Assets dimensions increased to 250x250 additionally they are now all square New caching system for configuration files and assets previews Interface updated to jquery 3.0.0 (It still works with outdated version) New language Russian (RU) HTTP request to load the interface reduced from 57 to 11 Interface weight reduced from 439.6 kB to 148.3 kB We now sopport this item via email (If you like comments you can still get assistance there) Version 1.0 - Stimpak \ud83d\udc89 - [06/11/2014] \u00b6 First Release","title":"Introduction"},{"location":"index.html#introduction","text":"Thank You for purchasing the AvatarMaker. In this document, we will guide you through the basic setup of your new web application. The Quick Start chapter is targeted toward users without any programming knowledge and represents a simple out-of-the-box installation. The other sections require at least some basic concepts of PHP For any question or bug report leave a comment on the item page or feel free to contact us at inochiteam@gmail.com we will answer as soon as possible. Remember to rate \u2b50\u2b50\u2b50\u2b50\u2b50 on CodeCanyon! It will help us a lot. Note If you find a security vulnerability, please communicate with us privately to reduce the possibility of endangering other users","title":"Introduction"},{"location":"index.html#server-requirements","text":"PHP 7.x - 8.x PHP GD or Imagick installed and properly configured Writing permissions for at least the cache folder Attention The AvatarMaker does work with PHP 5.x but we don't offer support for deprecated language versions. Please update your server to the lastest available version as soon as possibile to improve speed and security.","title":"Server Requirements"},{"location":"index.html#changelog","text":"","title":"Changelog"},{"location":"index.html#version-330-lara-29102022","text":"Added featured items Substituted Grunt with Webpack Updated build dependencies Updated jQuery to 3.6.1 Removed legacy skins Updated the documentation","title":"Version 3.3.0 - Lara \ud83d\udc71\u200d\u2640\ufe0f - [29/10/2022]"},{"location":"index.html#version-330-allison-06092020","text":"Fixed bug V3234C: UI crash if head layer has no colors palette Fixed bug V3233C: UI crash if there was no head layer defined Fixed bug V3232C: Progress bar goes beyond 100% if the number of layers is more that the default ones Fixed broken links in the documentation Fixed wrong email in readme Updated jQuery to 3.5.1 Updated Grunt and Grunt Uglify Replaced Ruby Sass with Node Sass Improved offline documentation browsing experience Updated documentation to reflect Sass compiler change","title":"Version 3.3.0 - Allison \ud83d\udc69\u200d\ud83c\udf3e - [06/09/2020]"},{"location":"index.html#version-323-elsie-20042020","text":"Fixed bug V3231C: Black previews on startup","title":"Version 3.2.3 - Elsie \ud83d\udc69\u200d\ud83d\udd27 - [20/04/2020]"},{"location":"index.html#version-322-elsie-08012019","text":"Added the ability to edit saved avatars in the UI","title":"Version 3.2.2 - Elsie \ud83d\udc69\u200d\ud83d\udd27 - [08/01/2019]"},{"location":"index.html#version-321-elsie-17102018","text":"Improved performances for not colored layers","title":"Version 3.2.1 - Elsie \ud83d\udc69\u200d\ud83d\udd27 - [17/10/2018]"},{"location":"index.html#version-32-elsie-04092018","text":"Added custom color selection in the UI Documentation updated with minimum system requirements Removed external CDNs to avoid GDPR issues Fixed bug V3201C: Missing words in some translations","title":"Version 3.2 - Elsie \ud83d\udc69\u200d\ud83d\udd27 - [04/09/2018]"},{"location":"index.html#version-31-maeve-04062018","text":"Added support for non-square avatars Added 5 new faces Added 2 new background Added 1 new eyebrows All Objects have been redrawn from scratch Optimized and upscaled avatar source file Optimized color selection in the UI Optimized debugging The Cache is now regenerated after changes to the configuration file Added Gruntfile and package.json Reformatted SCSS code","title":"Version 3.1 - Maeve \ud83d\udc83\ud83c\udfff - [04/06/2018]"},{"location":"index.html#version-302-zoe-25032018","text":"Added the possibility to disable the background options the UI to output transparent images Added FAQ in the documentation to help with folder and file permissions Added a Code Reference section in the documentation to help including the AM into an existing code Improved interoperability with existing code when saving the avatar","title":"Version 3.0.2 - Zoe \ud83d\udc08 - [25/03/2018]"},{"location":"index.html#version-301-zoe-22022018","text":"Added 7 new hairstyles (Requested by a user) Added 2 new mouths (Requested by a user)","title":"Version 3.0.1 - Zoe \ud83d\udc08 - [22/02/2018]"},{"location":"index.html#version-30-zoe-16012018","text":"Backend and frontend rewritten from scratch New Client-side preview New languages Arab (AR), Hebrew (HE), French (FR) New assets New REST API New loader with progress bar Backgrounds are now a category like the others Avatar dimensions increased to 1024x1024px Added support for ImageMagick","title":"Version 3.0 - Zoe \ud83d\udc08 - [16/01/2018]"},{"location":"index.html#version-22-merlin-14122017","text":"Fixed Bug V2101C: Empty items previews when the UI and the cache folder where not in the same directory","title":"Version 2.2 - Merlin \ud83d\udd76 - [14/12/2017]"},{"location":"index.html#version-21-galahad-02112017","text":"Fixed Bug V2001C: The random function didn't work as intended","title":"Version 2.1 - Galahad \ud83d\udd76 - [02/11/2017]"},{"location":"index.html#version-20-eva-18072016","text":"New responsive interface customizable through scss Assets dimensions increased to 250x250 additionally they are now all square New caching system for configuration files and assets previews Interface updated to jquery 3.0.0 (It still works with outdated version) New language Russian (RU) HTTP request to load the interface reduced from 57 to 11 Interface weight reduced from 439.6 kB to 148.3 kB We now sopport this item via email (If you like comments you can still get assistance there)","title":"Version 2.0 - Eva \ud83d\udc57 - [18/07/2016]"},{"location":"index.html#version-10-stimpak-06112014","text":"First Release","title":"Version 1.0 - Stimpak \ud83d\udc89 - [06/11/2014]"},{"location":"api.html","text":"REST API \u00b6 The backend of the avatarMaker can be queried using a REST API. The entry point for every call is always avatarmaker.php and it accepts both GET and POST requests. Avatar For MD5 hash \u00b6 The avatarMaker can be used as a drop-in replacement for gravatar identicons or similar services. This function can be especially useful in blogs and social websites. Using a simple GET request the backend will generate an avatar based on the provided md5 hash. The format of the call is the following: Parameter Type Notes SIZE Optional Integer [0-1024] The size of the rendered avatar, this parameter is optional and if missing the default 1024px will be used HASH String The md5 hash to generate the avatar. If an invalid hash is supplied, the API will answer with a 404 error yoursite.tld/UPLOADFOLDER/avatarmaker.php?size=[SIZE]&md5=[HASH] Warning For a given hash, the API will answer always with the same avatar, but if the content of the assets folder is changed, the generated avatar for the same hash will change! GET query string \u00b6 You can load an avatar with a simple GET request, just like loading a normal image. There are three GET parameters that control items, colors, and size of the avatar. Parameter Type Notes SIZE Optional Integer [0-1024] The size of the rendered avatar, this parameter is optional and if missing the default 1024px will be used avm_items The key/value list of the items that compose the avatar. The keys are the names of the layers and the values are the names if the selected items in that category. avm_colors The key/value list of the colors for each palette avm_items needs to be encoded in a specific format to work properly. Keys and values must be sepated by : and between each pair you must place a | . layer1:itemname1|layer2:itemname2 avm_colors follows the same rules as avm_items but in this case the values must be hex encoded colors. To avoid errors # must be replaced with 0x like in the example below. color1:0xffffff|color2:0xffffff This is an example call to the API: yoursite.tld/UPLOADFOLDER/avatarmaker.php?size=1024&avm_items=background:background_1|head:face_1|ears:ears_1|eyebrows:eyebrows_3|eyes:eyes_2|hair:hair_4|mouth:mouth_3|nose:nose_2&avm_colors=background:0x124d32|skin:0xD18A67|hair:0x815128 POST with JSON payload \u00b6 This is another way of generating the avatar and is equivalent the GET query string. It has the advantage of being able to generate the avatar from a JSON object without requiring to encode it. It may be faster and easier to use in certain contexts. The JSON object must be serialized and sent as the payload of a POST request. The generated avatar will be sent as a response. An example of the JSON object is the following: { \"size\":1024, \"layers\":{ \"background\": \"background_4\", \"ears\":\"ears_1\", \"head\":\"face_1\", \"eyebrows\":\"eyebrows_1\", \"eyes\":\"eyes_2\", \"nose\":\"nose_2\", \"mouth\":\"mouth_5\", \"hair\":\"hair_8\", \"objects\":\"a_0\" }, \"colors\":{ \"background\":\"#A2B4EE\", \"skin\":\"#EFC0A4\", \"hair\":\"#FFD900\", \"objects\":\"#1267df\" } } Parameter Type Notes size Optional Integer [0-1024] The size of the rendered avatar, this parameter is optional and if missing the default 1024px will be used layers Object An object holding all layers as keys with the name of the selected item in the category as value colors Object An object holding all palettesIDs as keys with the corresponding color, hex encoded, as values","title":"REST API"},{"location":"api.html#rest-api","text":"The backend of the avatarMaker can be queried using a REST API. The entry point for every call is always avatarmaker.php and it accepts both GET and POST requests.","title":"REST API"},{"location":"api.html#avatar-for-md5-hash","text":"The avatarMaker can be used as a drop-in replacement for gravatar identicons or similar services. This function can be especially useful in blogs and social websites. Using a simple GET request the backend will generate an avatar based on the provided md5 hash. The format of the call is the following: Parameter Type Notes SIZE Optional Integer [0-1024] The size of the rendered avatar, this parameter is optional and if missing the default 1024px will be used HASH String The md5 hash to generate the avatar. If an invalid hash is supplied, the API will answer with a 404 error yoursite.tld/UPLOADFOLDER/avatarmaker.php?size=[SIZE]&md5=[HASH] Warning For a given hash, the API will answer always with the same avatar, but if the content of the assets folder is changed, the generated avatar for the same hash will change!","title":"Avatar For MD5 hash"},{"location":"api.html#get-query-string","text":"You can load an avatar with a simple GET request, just like loading a normal image. There are three GET parameters that control items, colors, and size of the avatar. Parameter Type Notes SIZE Optional Integer [0-1024] The size of the rendered avatar, this parameter is optional and if missing the default 1024px will be used avm_items The key/value list of the items that compose the avatar. The keys are the names of the layers and the values are the names if the selected items in that category. avm_colors The key/value list of the colors for each palette avm_items needs to be encoded in a specific format to work properly. Keys and values must be sepated by : and between each pair you must place a | . layer1:itemname1|layer2:itemname2 avm_colors follows the same rules as avm_items but in this case the values must be hex encoded colors. To avoid errors # must be replaced with 0x like in the example below. color1:0xffffff|color2:0xffffff This is an example call to the API: yoursite.tld/UPLOADFOLDER/avatarmaker.php?size=1024&avm_items=background:background_1|head:face_1|ears:ears_1|eyebrows:eyebrows_3|eyes:eyes_2|hair:hair_4|mouth:mouth_3|nose:nose_2&avm_colors=background:0x124d32|skin:0xD18A67|hair:0x815128","title":"GET query string"},{"location":"api.html#post-with-json-payload","text":"This is another way of generating the avatar and is equivalent the GET query string. It has the advantage of being able to generate the avatar from a JSON object without requiring to encode it. It may be faster and easier to use in certain contexts. The JSON object must be serialized and sent as the payload of a POST request. The generated avatar will be sent as a response. An example of the JSON object is the following: { \"size\":1024, \"layers\":{ \"background\": \"background_4\", \"ears\":\"ears_1\", \"head\":\"face_1\", \"eyebrows\":\"eyebrows_1\", \"eyes\":\"eyes_2\", \"nose\":\"nose_2\", \"mouth\":\"mouth_5\", \"hair\":\"hair_8\", \"objects\":\"a_0\" }, \"colors\":{ \"background\":\"#A2B4EE\", \"skin\":\"#EFC0A4\", \"hair\":\"#FFD900\", \"objects\":\"#1267df\" } } Parameter Type Notes size Optional Integer [0-1024] The size of the rendered avatar, this parameter is optional and if missing the default 1024px will be used layers Object An object holding all layers as keys with the name of the selected item in the category as value colors Object An object holding all palettesIDs as keys with the corresponding color, hex encoded, as values","title":"POST with JSON payload"},{"location":"code-reference.html","text":"Code Examples \u00b6 This section of the documentation is targeted towards programmers with PHP experience. It will help you understand how the avatarMaker backend works and how you can integrate it into an existing application. Only publicly available methods are described here, as the others can't be used outside the class scope. Note The avatarMaker is in continuous development based on user's feedback and necessities. For this reason, all the methods and functions discussed here may change in future releases. outAppConfig() \u00b6 Description \u00b6 This function will generate or load the configuration file and all the preview images. The generated data will be saved into the cache folder and it will be served from the disk for all the subsequent calls. After calling this function, it will set the appropriate headers for JSON data, send the configuration and close the connection. Parameters \u00b6 No Parameters Return \u00b6 No Return Code Example \u00b6 public function outAppConfig( ) { ... } setAvatar() \u00b6 Description \u00b6 This function loads an avatar tree into the class memory. The JSON data can be passed through a paramether or, if this is empty, the function will try to load it from php://input . Parameters \u00b6 Parameter Type Description $json string optional A JSON encoded avatar tree Return \u00b6 true in case of success, false otherwise. Code Example \u00b6 public function setAvatar( $json = false ) { ... } setAvatarMd5() \u00b6 Description \u00b6 This function will generate an avatar tree based on the given MD5 string. Warning For a given hash, this will generate always with the same avatar, but if the content of the assets folder is changed, the generated avatar for the same hash will change! Parameters \u00b6 Parameter Type Description $md5 string required A valid MD5 string Return \u00b6 true in case of success, false otherwise. Code Example \u00b6 public function setAvatarMd5( $md5 ) { ... } setAvatarGET() \u00b6 Description \u00b6 Generates an avatar tree based on GET data. If the supplied data is only partial it will generate an incomplete avatar tree (It can still be rendered). Parameters \u00b6 No Parameters Return \u00b6 No Return Code Example \u00b6 public function setAvatarGET( ){ ... } renderAvatar() \u00b6 Description \u00b6 Parameters \u00b6 Parameter Type Description $savePath string optional A writable path (relative or absolute) with file name and extension (ex. /test/image.png) Note savePath will be ignored if the renderer_format key in the configuration is not set to one of the _saved options. If it is, this parameter is required for saving the avatar. Code Example \u00b6 public function renderAvatar( $savePath = false ) { ... }","title":"Code Reference"},{"location":"code-reference.html#code-examples","text":"This section of the documentation is targeted towards programmers with PHP experience. It will help you understand how the avatarMaker backend works and how you can integrate it into an existing application. Only publicly available methods are described here, as the others can't be used outside the class scope. Note The avatarMaker is in continuous development based on user's feedback and necessities. For this reason, all the methods and functions discussed here may change in future releases.","title":"Code Examples"},{"location":"code-reference.html#outappconfig","text":"","title":"outAppConfig()"},{"location":"code-reference.html#description","text":"This function will generate or load the configuration file and all the preview images. The generated data will be saved into the cache folder and it will be served from the disk for all the subsequent calls. After calling this function, it will set the appropriate headers for JSON data, send the configuration and close the connection.","title":"Description"},{"location":"code-reference.html#parameters","text":"No Parameters","title":"Parameters"},{"location":"code-reference.html#return","text":"No Return","title":"Return"},{"location":"code-reference.html#code-example","text":"public function outAppConfig( ) { ... }","title":"Code Example"},{"location":"code-reference.html#setavatar","text":"","title":"setAvatar()"},{"location":"code-reference.html#description_1","text":"This function loads an avatar tree into the class memory. The JSON data can be passed through a paramether or, if this is empty, the function will try to load it from php://input .","title":"Description"},{"location":"code-reference.html#parameters_1","text":"Parameter Type Description $json string optional A JSON encoded avatar tree","title":"Parameters"},{"location":"code-reference.html#return_1","text":"true in case of success, false otherwise.","title":"Return"},{"location":"code-reference.html#code-example_1","text":"public function setAvatar( $json = false ) { ... }","title":"Code Example"},{"location":"code-reference.html#setavatarmd5","text":"","title":"setAvatarMd5()"},{"location":"code-reference.html#description_2","text":"This function will generate an avatar tree based on the given MD5 string. Warning For a given hash, this will generate always with the same avatar, but if the content of the assets folder is changed, the generated avatar for the same hash will change!","title":"Description"},{"location":"code-reference.html#parameters_2","text":"Parameter Type Description $md5 string required A valid MD5 string","title":"Parameters"},{"location":"code-reference.html#return_2","text":"true in case of success, false otherwise.","title":"Return"},{"location":"code-reference.html#code-example_2","text":"public function setAvatarMd5( $md5 ) { ... }","title":"Code Example"},{"location":"code-reference.html#setavatarget","text":"","title":"setAvatarGET()"},{"location":"code-reference.html#description_3","text":"Generates an avatar tree based on GET data. If the supplied data is only partial it will generate an incomplete avatar tree (It can still be rendered).","title":"Description"},{"location":"code-reference.html#parameters_3","text":"No Parameters","title":"Parameters"},{"location":"code-reference.html#return_3","text":"No Return","title":"Return"},{"location":"code-reference.html#code-example_3","text":"public function setAvatarGET( ){ ... }","title":"Code Example"},{"location":"code-reference.html#renderavatar","text":"","title":"renderAvatar()"},{"location":"code-reference.html#description_4","text":"","title":"Description"},{"location":"code-reference.html#parameters_4","text":"Parameter Type Description $savePath string optional A writable path (relative or absolute) with file name and extension (ex. /test/image.png) Note savePath will be ignored if the renderer_format key in the configuration is not set to one of the _saved options. If it is, this parameter is required for saving the avatar.","title":"Parameters"},{"location":"code-reference.html#code-example_4","text":"public function renderAvatar( $savePath = false ) { ... }","title":"Code Example"},{"location":"configuration.html","text":"Advanced Configuration \u00b6 You can customize how the avatarMaker works by simply editing its configuration file. You can find it under the name avatarmaker.config.php . This is a simple PHP file and each configuration key is conveniently commented and its type is stated above it. Note Unlike previous versions of the avatarMaker, if you edit the configuration file, the cache will be regenerated automatically. App Branding \u00b6 Type: String A Name that will be displayed in the client app to highlight your brand. Depending on the skin this may not be visible. public $app_brand = \"Your Name Here!\"; App Language \u00b6 Type: String The avatarMaker comes with 9 languages ready to use and you can add more as you like. To activate one of the language files you need to specify its name here. For instructions on how to add a new language, refere to the appropriate chapter: Custom Language . These are the names of the supplied languages: Language File Name Italiano it-it English en-us \u0627\u0644\u0639\u064e\u0631\u064e\u0628\u0650\u064a\u064e\u0651\u0629 ar-ar Deutsche de-de Espa\u00f1ol es-es Fran\u00e7ais fr-fr \u05e2\u05b4\u05d1\u05b0\u05e8\u05b4\u05d9\u05ea he-he \u65e5\u672c\u8a9e ja-ja \u0440\u0443\u0301\u0441\u0441\u043a\u0438\u0439 ru-ru public $app_local = \"en-us\"; Display Credits \u00b6 Type: Boolean Some skins may display a link to the inochiTeam website in an unobtrusive position. If you set this key to false this link will be hidden. Showing this link is absolutely optional, but if you do we will really appreciate it \ud83d\ude0d. public $app_displayCredits = true; Random avatar on startup \u00b6 Type: Boolean When the client app is loaded, it can generate a random avatar or display a default one built using the first item of each category. public $app_randStartup = true; Disable the background in the UI \u00b6 Type: Boolean The avatarMaker can output images with transparent background. This option is not available in the UI by default, as such behavior may not be desirable in all contexts. By setting this variable to true , the background options will be hidden and the user will not be able to select them. All the avatars generated through the UI will have a transparent background. This setting does not affect the REST API. If instead, you want to add the transparent background among the other options you should refer to this FAQ: Add a fully transparent background option . public $app_transparentBackground = false; Update colors on random avatar \u00b6 Type: Boolean When a random avatar is generated, colors are randomized too and items previews need to be re-rendered to match the newly selected tone. Rendering all the previews at the same time can be taxing especially on each hardware like mobile devices. If the random avatar generation is too slow for your tastes you can decide to disable the update of the previews. The random avatar will be generated as expected. To know more about this topic refere to the appropriate section in the FAQs The random avatar generation is too slow . public $app_randUpdateColors = true; Allow custom colors selection \u00b6 Type: Boolean If true , the UI will display a color picker alongside the presets and let the users choose any color they want for any palette. public $app_allowCustomColors = true; Folders paths \u00b6 Type: String This section of the configuration file allows you to change the default paths of all the folders required by the avatarMaker to work properly. Some folders need to be writable so make sure to set permissions accordingly. All paths can be both absolute or relative. Assets Folder Read-Only \u00b6 public $folder_assets = \"assets/\"; Localization files folder Read-Only \u00b6 public $folder_locals = \"local/\"; Cache location Writable \u00b6 public $folder_cache = \"cache/\"; Rendering library \u00b6 Type: String To meet needs of more users we have added support for ImageMagick alongside with PHP GD. It delivers superior quality but its availability is limited especially on shared hostings. It your server supports it, we strongly recommend enabling it in the avatarMaker instead of GD. To know more about the differences between this libraries check out the dedicated section in the FAQs PHP GD vs ImageMagick . Library Alias PHP GD gd ImageMagick magick public $renderer_driver = \"magick\"; Output format \u00b6 Type: String The avatarMaker can output the generated avatars in 3 different formats and optionally save the output to the disk. To set a specific output format, pick the corresponding alias from the table below. To save the output choose the _saved versions. Format Alias JPG jpg JPG jpg_saved The rendered image will be saved on the server PNG png PNG png_saved The rendered image will be saved on the server GIF gif GIF gif_saved The rendered image will be saved on the server public $renderer_format = \"png\"; Output quality \u00b6 Type: Integer [1, 100] If you have decided to output your avatars as jpg files, you can set the quality of the image using this variable. Gif and PNG will not be affected by this setting. The value must be an integer between 1 and 100, where 1 is the lowest quality and smallest file size. public $renderer_quality = 90; Output overlay \u00b6 Type: String or Boolean When rendering the final avatar you have the option to apply an overlay whether it is your logo or a simple line of text, if you set this valible to false nothing will be added. Value Action false No overlay true The content of assets/overlay.png will be placed over the avatar String The text in the variable will be written in the bottom left corner of the avatar public $renderer_overlay = false; public $renderer_overlay = \"Overlay Text\"; Assets sizes \u00b6 Type: Int The sizes of the base images for the avatars in px. All images must be of the same sizes specified here. From version 3.1 the avatarMaker supports rectangular avatars. public $renderer_assetsSizes = array( 'x' => 1024, 'y' => 1024 ); Cache sizes \u00b6 Type: Int The sizes of the individual items in the cache. This setting will affect the preview quality and the speed of the UI. A bigger cache file means longer update times and slower loading for the app while a smaller file will reduce the quality but increase the performances. If you set the Y value to false , it will be calculated based on the aspect ratio of the source images. public $renderer_cacheSizes = array( 'x' => 400, 'y' => false ); Avatar layers \u00b6 Type: Array This array holds the structure of the avatars, each entry is a layer and the order here will be followed while rendering the images. In each row KEY => VALUE the key must be the name of a category folder inside the assets folder, the value is the id of a color palette or false if that category should not be colored. This is an example: \"eyes\" => false, \"eyebrows\" => \"hair\", The first line states that a layer eyes must be added to the avatar and it cannot be colored by the user, as the value is false . This layer must come before the eyebrows layer, that, on the contrary, can be colored using the hair palette. Note Multiple layers can share a common palette, for example both hair and eyebrows can be color with the hair palette. public $avatar_layers = array( \"background\" => \"background\", \"ears\" => \"skin\", \"head\" => \"skin\", \"eyes\" => false, \"eyebrows\" => \"hair\", \"nose\" => false, \"mouth\" => false, \"hair\" => \"hair\", \"objects\" => \"objects\" ); Featured items \u00b6 Type: Array This new setting allows you to highlight items in the GUI. You can use it to attract attention to recently added parts. Add a new key with the name of the layer containing the items to highlight and then as a value and array with all the names of the items. public $avatar_featured_items = array( \"head\" => [\"face_1\",\"face_6\",\"face_10\"], \"eyes\" => [\"eyes_5\"], ); Color palattes \u00b6 Type: Array In order to color a layer, you need to define a color palette to use. Palettes are nothing more than arrays of hex encoded colors with a unique name to identify them. In the example below, you can see how to define them. Remember that the palette id MUST be unique. public $avatar_palettes = array( \"background\" => array( \"#ffffff\", --- \"#333333\" ), \"skin\" => array( \"#f6d9cb\", --- \"#9ccc65\" ) );","title":"Advanced Configuration"},{"location":"configuration.html#advanced-configuration","text":"You can customize how the avatarMaker works by simply editing its configuration file. You can find it under the name avatarmaker.config.php . This is a simple PHP file and each configuration key is conveniently commented and its type is stated above it. Note Unlike previous versions of the avatarMaker, if you edit the configuration file, the cache will be regenerated automatically.","title":"Advanced Configuration"},{"location":"configuration.html#app-branding","text":"Type: String A Name that will be displayed in the client app to highlight your brand. Depending on the skin this may not be visible. public $app_brand = \"Your Name Here!\";","title":"App Branding"},{"location":"configuration.html#app-language","text":"Type: String The avatarMaker comes with 9 languages ready to use and you can add more as you like. To activate one of the language files you need to specify its name here. For instructions on how to add a new language, refere to the appropriate chapter: Custom Language . These are the names of the supplied languages: Language File Name Italiano it-it English en-us \u0627\u0644\u0639\u064e\u0631\u064e\u0628\u0650\u064a\u064e\u0651\u0629 ar-ar Deutsche de-de Espa\u00f1ol es-es Fran\u00e7ais fr-fr \u05e2\u05b4\u05d1\u05b0\u05e8\u05b4\u05d9\u05ea he-he \u65e5\u672c\u8a9e ja-ja \u0440\u0443\u0301\u0441\u0441\u043a\u0438\u0439 ru-ru public $app_local = \"en-us\";","title":"App Language"},{"location":"configuration.html#display-credits","text":"Type: Boolean Some skins may display a link to the inochiTeam website in an unobtrusive position. If you set this key to false this link will be hidden. Showing this link is absolutely optional, but if you do we will really appreciate it \ud83d\ude0d. public $app_displayCredits = true;","title":"Display Credits"},{"location":"configuration.html#random-avatar-on-startup","text":"Type: Boolean When the client app is loaded, it can generate a random avatar or display a default one built using the first item of each category. public $app_randStartup = true;","title":"Random avatar on startup"},{"location":"configuration.html#disable-the-background-in-the-ui","text":"Type: Boolean The avatarMaker can output images with transparent background. This option is not available in the UI by default, as such behavior may not be desirable in all contexts. By setting this variable to true , the background options will be hidden and the user will not be able to select them. All the avatars generated through the UI will have a transparent background. This setting does not affect the REST API. If instead, you want to add the transparent background among the other options you should refer to this FAQ: Add a fully transparent background option . public $app_transparentBackground = false;","title":"Disable the background in the UI"},{"location":"configuration.html#update-colors-on-random-avatar","text":"Type: Boolean When a random avatar is generated, colors are randomized too and items previews need to be re-rendered to match the newly selected tone. Rendering all the previews at the same time can be taxing especially on each hardware like mobile devices. If the random avatar generation is too slow for your tastes you can decide to disable the update of the previews. The random avatar will be generated as expected. To know more about this topic refere to the appropriate section in the FAQs The random avatar generation is too slow . public $app_randUpdateColors = true;","title":"Update colors on random avatar"},{"location":"configuration.html#allow-custom-colors-selection","text":"Type: Boolean If true , the UI will display a color picker alongside the presets and let the users choose any color they want for any palette. public $app_allowCustomColors = true;","title":"Allow custom colors selection"},{"location":"configuration.html#folders-paths","text":"Type: String This section of the configuration file allows you to change the default paths of all the folders required by the avatarMaker to work properly. Some folders need to be writable so make sure to set permissions accordingly. All paths can be both absolute or relative.","title":"Folders paths"},{"location":"configuration.html#assets-folder-read-only","text":"public $folder_assets = \"assets/\";","title":"Assets Folder Read-Only"},{"location":"configuration.html#localization-files-folder-read-only","text":"public $folder_locals = \"local/\";","title":"Localization files folder Read-Only"},{"location":"configuration.html#cache-location-writable","text":"public $folder_cache = \"cache/\";","title":"Cache location Writable"},{"location":"configuration.html#rendering-library","text":"Type: String To meet needs of more users we have added support for ImageMagick alongside with PHP GD. It delivers superior quality but its availability is limited especially on shared hostings. It your server supports it, we strongly recommend enabling it in the avatarMaker instead of GD. To know more about the differences between this libraries check out the dedicated section in the FAQs PHP GD vs ImageMagick . Library Alias PHP GD gd ImageMagick magick public $renderer_driver = \"magick\";","title":"Rendering library"},{"location":"configuration.html#output-format","text":"Type: String The avatarMaker can output the generated avatars in 3 different formats and optionally save the output to the disk. To set a specific output format, pick the corresponding alias from the table below. To save the output choose the _saved versions. Format Alias JPG jpg JPG jpg_saved The rendered image will be saved on the server PNG png PNG png_saved The rendered image will be saved on the server GIF gif GIF gif_saved The rendered image will be saved on the server public $renderer_format = \"png\";","title":"Output format"},{"location":"configuration.html#output-quality","text":"Type: Integer [1, 100] If you have decided to output your avatars as jpg files, you can set the quality of the image using this variable. Gif and PNG will not be affected by this setting. The value must be an integer between 1 and 100, where 1 is the lowest quality and smallest file size. public $renderer_quality = 90;","title":"Output quality"},{"location":"configuration.html#output-overlay","text":"Type: String or Boolean When rendering the final avatar you have the option to apply an overlay whether it is your logo or a simple line of text, if you set this valible to false nothing will be added. Value Action false No overlay true The content of assets/overlay.png will be placed over the avatar String The text in the variable will be written in the bottom left corner of the avatar public $renderer_overlay = false; public $renderer_overlay = \"Overlay Text\";","title":"Output overlay"},{"location":"configuration.html#assets-sizes","text":"Type: Int The sizes of the base images for the avatars in px. All images must be of the same sizes specified here. From version 3.1 the avatarMaker supports rectangular avatars. public $renderer_assetsSizes = array( 'x' => 1024, 'y' => 1024 );","title":"Assets sizes"},{"location":"configuration.html#cache-sizes","text":"Type: Int The sizes of the individual items in the cache. This setting will affect the preview quality and the speed of the UI. A bigger cache file means longer update times and slower loading for the app while a smaller file will reduce the quality but increase the performances. If you set the Y value to false , it will be calculated based on the aspect ratio of the source images. public $renderer_cacheSizes = array( 'x' => 400, 'y' => false );","title":"Cache sizes"},{"location":"configuration.html#avatar-layers","text":"Type: Array This array holds the structure of the avatars, each entry is a layer and the order here will be followed while rendering the images. In each row KEY => VALUE the key must be the name of a category folder inside the assets folder, the value is the id of a color palette or false if that category should not be colored. This is an example: \"eyes\" => false, \"eyebrows\" => \"hair\", The first line states that a layer eyes must be added to the avatar and it cannot be colored by the user, as the value is false . This layer must come before the eyebrows layer, that, on the contrary, can be colored using the hair palette. Note Multiple layers can share a common palette, for example both hair and eyebrows can be color with the hair palette. public $avatar_layers = array( \"background\" => \"background\", \"ears\" => \"skin\", \"head\" => \"skin\", \"eyes\" => false, \"eyebrows\" => \"hair\", \"nose\" => false, \"mouth\" => false, \"hair\" => \"hair\", \"objects\" => \"objects\" );","title":"Avatar layers"},{"location":"configuration.html#featured-items","text":"Type: Array This new setting allows you to highlight items in the GUI. You can use it to attract attention to recently added parts. Add a new key with the name of the layer containing the items to highlight and then as a value and array with all the names of the items. public $avatar_featured_items = array( \"head\" => [\"face_1\",\"face_6\",\"face_10\"], \"eyes\" => [\"eyes_5\"], );","title":"Featured items"},{"location":"configuration.html#color-palattes","text":"Type: Array In order to color a layer, you need to define a color palette to use. Palettes are nothing more than arrays of hex encoded colors with a unique name to identify them. In the example below, you can see how to define them. Remember that the palette id MUST be unique. public $avatar_palettes = array( \"background\" => array( \"#ffffff\", --- \"#333333\" ), \"skin\" => array( \"#f6d9cb\", --- \"#9ccc65\" ) );","title":"Color palattes"},{"location":"custom-items.html","text":"Custom items and layers \u00b6 The avatarMaker has been designed with flexibility in mind. You can easily add layers by editing a couple of lines of code and items by copying them into a folder. Custom Layers \u00b6 You can add a new layer in 4 simple steps: Create a folder in the assets directory named with the id of the new layer and copy the items of the layer into it. Add a new KEY => VALUE pair to the $avatar_layers array in the configuration file (More info here: Avatar layers ). Add a new KEY => VALUE pair in your currently selected localization file to give a name to the new layer (More info here: Custom language ).. Open the index.html file and locate, around line 104, the list of all layers in the menu. Add a new li items like the existing ones, where avm-layerId will be set to the id of the new layer and avm-local to the id of the line in the localization file. The new layer should now be working as expected. Custom Items \u00b6 Adding new item is easy as uploading a file into a folder. From version 3.1 the base images can be of any size and not just square like in previous releases. Remember to set the appropriate measures in the configuration file. If you want to create new items, you can start from scratch or extend the default set using the supplied illustrator file. Once you have finished drawing, export it as a png and upload it to the appropriate category folder in the assets directory. The new item will be recognized automagically and will but available in the client app after clearing the cache. Warning Due to the caching system used by the avatarMaker, after uploading a new item you must manually clear the cache folder (Do not delete the folder itself) or it will be ignored. Here are some examples of how items should be to work properly: Item Note If an item will not be colored by the avatarMaker you can use colors in it, they will not be altered. Items that will be tinted must be grayscale only or the final image will not be colored properly. The image will be converted in a gradient between the tint color and black. Advices for creating new items \u00b6 Be sure that each item is in its proper position relative to the rest of the avatar. If it is not, you may take it as a reference for future items misaligning them too. Fixing this issues may take you a lot of time. Images that will be tinted must be grayscale and you can't mix tintable and not tintable items in the same category. If you have this necessity (see the mouth category) you may be able to use transparencies. Even if the avatarMaker accepts png file and where they come from is not important, using vector graphics as a base is more future proof as they can be re-exported at different sizes if needed without losing quality.","title":"Custom Items and Layers"},{"location":"custom-items.html#custom-items-and-layers","text":"The avatarMaker has been designed with flexibility in mind. You can easily add layers by editing a couple of lines of code and items by copying them into a folder.","title":"Custom items and layers"},{"location":"custom-items.html#custom-layers","text":"You can add a new layer in 4 simple steps: Create a folder in the assets directory named with the id of the new layer and copy the items of the layer into it. Add a new KEY => VALUE pair to the $avatar_layers array in the configuration file (More info here: Avatar layers ). Add a new KEY => VALUE pair in your currently selected localization file to give a name to the new layer (More info here: Custom language ).. Open the index.html file and locate, around line 104, the list of all layers in the menu. Add a new li items like the existing ones, where avm-layerId will be set to the id of the new layer and avm-local to the id of the line in the localization file. The new layer should now be working as expected.","title":"Custom Layers"},{"location":"custom-items.html#custom-items","text":"Adding new item is easy as uploading a file into a folder. From version 3.1 the base images can be of any size and not just square like in previous releases. Remember to set the appropriate measures in the configuration file. If you want to create new items, you can start from scratch or extend the default set using the supplied illustrator file. Once you have finished drawing, export it as a png and upload it to the appropriate category folder in the assets directory. The new item will be recognized automagically and will but available in the client app after clearing the cache. Warning Due to the caching system used by the avatarMaker, after uploading a new item you must manually clear the cache folder (Do not delete the folder itself) or it will be ignored. Here are some examples of how items should be to work properly: Item Note If an item will not be colored by the avatarMaker you can use colors in it, they will not be altered. Items that will be tinted must be grayscale only or the final image will not be colored properly. The image will be converted in a gradient between the tint color and black.","title":"Custom Items"},{"location":"custom-items.html#advices-for-creating-new-items","text":"Be sure that each item is in its proper position relative to the rest of the avatar. If it is not, you may take it as a reference for future items misaligning them too. Fixing this issues may take you a lot of time. Images that will be tinted must be grayscale and you can't mix tintable and not tintable items in the same category. If you have this necessity (see the mouth category) you may be able to use transparencies. Even if the avatarMaker accepts png file and where they come from is not important, using vector graphics as a base is more future proof as they can be re-exported at different sizes if needed without losing quality.","title":"Advices for creating new items"},{"location":"faqs.html","text":"FAQs and Known Issues \u00b6 PHP GD vs ImageMagick \u00b6 The avatarMaker support both PHP GD and ImageMagick but deciding which one to use may be confusing. On the majority of the servers, only PHP GD is available, but although it is much more supported the quality of the final images may be lower than the one offered by ImageMagick. Here is an example, the same avatar rendered using both libraries. Between the two libraries there are other technical differences, for example, GD shares its memory with PHP while ImageMagick does not, possibly avoiding out of memory errors. These aspects lay outside the scope of this document and won't be explained here. We recommend using ImageMagick whenever its support is available to get the most out of your avatarMaker. Huge cache size using PHP GD \u00b6 Using PHP GD as a rendering library may result in big cache files (in the order of 3Mb or more each). This happens because your server lacks support for the zlib library that PHP GD uses to compress the output images. The avatarMaker works without it but due to the big images the loading times will increase. If you are affected by this problem you can manually optimize the cache images by the use of free tools like tinypng.com . As it is not regenerated often this should not take much of your time. Slow loading of the client app \u00b6 First of all, check your connection and the server load. If the problem persists, you should check the size of the cache files. On some servers, PHP GD outputs huge files and their download time is the cause of the slow loading. Check Huge cache size using PHP GD for more information on this topic. Add a fully transparent background option \u00b6 If you want to allow your users to set a transparent background to their avatars, without completely disabling the other options, you can simply add a fully transparent item into the background directory. You can copy and paste the item a_0.png from inside the objects folder. Permission errors \u00b6 On some servers, the folder permissions don't allow PHP to write files into the cache folder, preventing the avatarMaker from working properly. This error usually causes the interface to malfunction as the server return 404 errors to all the requests it makes. Make sure that the cache folder has 755 permissions mask. Warning You may be tempted to set the directory to 777 to avoid any problem. This solution will work but it's not recommended in a production environment, as it gives full permission (read, write & execute) to all users on that machine with obvious security risks. Error 500 when visiting the backend \u00b6 On some servers, the UI returns an error with no additional description. Inspecting the error you should observe the server returning an error 500, refusing to execute the script. This behavior is observed on servers running PHP via FastCGI under a different user than the one running the web server. The UI is displayed with no errors because the web server can access the HTML file and sends it directly to the user, HTML files are not passed to the PHP interpreter. When the backend is requested, the web server has access to its file and summons the PHP interpreter. PHP, under a different user, can't read the file and this stall results in an error 500. To solve this issue you can either change the user and/or group executing PHP or change the permissions of the PHP files to something less restrictive. Other solutions are possible but all of them depend on your specific environment. Save the avatars to the disk \u00b6 Instead of letting the users download their avatars you may want to save them on your server. This can be easily accomplished but it requires some coding on your part. In the past, we have tried to come up with a solution to avoid this necessity but due to the variety of the use cases, it was impossible to offer an always valid solution to this problem. For this reason, we have created this small but complete example that, alongside with the code reference section, should help you to achieve your desired results. Step 1 \u00b6 Open the configuration file and the the renderer_format key to png_saved (or any other _saved option ). This step will tell the UI that the avatar won't be download and it will display a different loading screen. public $renderer_format = \"png_saved\"; Step 2 \u00b6 Open the avatarmaker.php file and apport the following changes Insert this code $saveFolder = \"yourfolder/\"; $avatarName = md5( microtime(true) ) . \".png\"; After $avatarMaker = new HT_AvatarMaker(); Step 3 \u00b6 Replace every estance of $avatarMaker->renderAvatar( ); With this code $avatarMaker->renderAvatar( $saveFolder . $avatarName ); From now on, all the generated avatars will be saved on the server with a random name. This is not very useful in itself but it should be easy to modify to suit your needs. If you need further assistance don't hesitate to contact us. Custom previews for each items \u00b6 Right now there is no easy way to add custom previews for the items. We are working to add this functionality in future releases. Right now you can obtain this result by manually editing the cache files but, although this works, it is not recommended as the cache may be regenerated and the changes lost. What are webpack.config.js, postcss.config.js and package.js? \u00b6 Webpack is a javascript build tool, it allows developers to use more modern technologies like sass and es6 even if the browser can't understand them by compiling them to standard CSS and javascript. We have included all the development files and tools to ease the customization and extension of the AvatarMaker. When running Webpack in development, all modifications to the source files are automatically compiled and written over the distribution files. Beware that the development versions of the compiled files are not minified and should not be used in production. Although explaining how Webpack works, is outside the scope of this document, we will give here a list of steps and commands to execute that will allow you to use it without any prior knowledge. For a more detailed explanation of how it works, please refer to the project website. Webpack website Note Using Webpack is not mandatory to run the application, we included it for convenience in case you want to customize the AM. Before installing Webpack you need to install Node.JS - Official Download Run the following commands in the root directory of your project. # Install grunt npm install -g webpack webpack-cli # Install the dependencies npm install # Run webpack in development mode npm run start:dev # Prepare the release ready files npm run build Note You will find a new folder (node_modules) inside the avatarMaker directory. It's needed for Webpack to work properly but you it should not be uploaded. The files inside it are used during development only. GDPR and external CDNs \u00b6 Before version 3.2 the avatarMaker used external CDNs for web fonts and libraries. This choice made the loading of the interface a bit faster and it did not present any concern before the adoption of the GDPR (General Data Protection Regulation). With this new regulation, all website owners have to specify what data they collect, how they store it and give the user the ability to opt-out. As an example, Google Fonts acts as a \"data controller\" forcing every website owner to specify its use in their privacy polices and the miscommunication may lead to legal issues. We have decided to remove every dependency to external services eliminating the issue at its roo. The avatarMaker now doesn't collect ANY data, being it identifiable or anonymous, nor it relies on external services that may collect information about the user. * With this choice, the final user avoids any risk of fines or legal actions. \"What about the loading times of the interface?\" you may ask... After the first loading of the page, there is no difference. If you concerned about the millisecond delay this change may introduce you can easily edit the avatar maker source code to reintroduce the CDNs. Edit a previously saved avatar \u00b6 From version 3.2.2 you can now edit previously generated avatars in the UI. The initialization JS method now accepts an optional parameter. You pass to the UI a JSON string or object containing the structure of the avatar to load. You have to save the avatar tree before rendering the avatar in the backend as you can't edit the final image in any way. $( \"#avmContainer\" ).avatarMaker('avatarmaker.php', 'JSON HERE');","title":"FAQs and Known Issues"},{"location":"faqs.html#faqs-and-known-issues","text":"","title":"FAQs and Known Issues"},{"location":"faqs.html#php-gd-vs-imagemagick","text":"The avatarMaker support both PHP GD and ImageMagick but deciding which one to use may be confusing. On the majority of the servers, only PHP GD is available, but although it is much more supported the quality of the final images may be lower than the one offered by ImageMagick. Here is an example, the same avatar rendered using both libraries. Between the two libraries there are other technical differences, for example, GD shares its memory with PHP while ImageMagick does not, possibly avoiding out of memory errors. These aspects lay outside the scope of this document and won't be explained here. We recommend using ImageMagick whenever its support is available to get the most out of your avatarMaker.","title":"PHP GD vs ImageMagick"},{"location":"faqs.html#huge-cache-size-using-php-gd","text":"Using PHP GD as a rendering library may result in big cache files (in the order of 3Mb or more each). This happens because your server lacks support for the zlib library that PHP GD uses to compress the output images. The avatarMaker works without it but due to the big images the loading times will increase. If you are affected by this problem you can manually optimize the cache images by the use of free tools like tinypng.com . As it is not regenerated often this should not take much of your time.","title":"Huge cache size using PHP GD"},{"location":"faqs.html#slow-loading-of-the-client-app","text":"First of all, check your connection and the server load. If the problem persists, you should check the size of the cache files. On some servers, PHP GD outputs huge files and their download time is the cause of the slow loading. Check Huge cache size using PHP GD for more information on this topic.","title":"Slow loading of the client app"},{"location":"faqs.html#add-a-fully-transparent-background-option","text":"If you want to allow your users to set a transparent background to their avatars, without completely disabling the other options, you can simply add a fully transparent item into the background directory. You can copy and paste the item a_0.png from inside the objects folder.","title":"Add a fully transparent background option"},{"location":"faqs.html#permission-errors","text":"On some servers, the folder permissions don't allow PHP to write files into the cache folder, preventing the avatarMaker from working properly. This error usually causes the interface to malfunction as the server return 404 errors to all the requests it makes. Make sure that the cache folder has 755 permissions mask. Warning You may be tempted to set the directory to 777 to avoid any problem. This solution will work but it's not recommended in a production environment, as it gives full permission (read, write & execute) to all users on that machine with obvious security risks.","title":"Permission errors"},{"location":"faqs.html#error-500-when-visiting-the-backend","text":"On some servers, the UI returns an error with no additional description. Inspecting the error you should observe the server returning an error 500, refusing to execute the script. This behavior is observed on servers running PHP via FastCGI under a different user than the one running the web server. The UI is displayed with no errors because the web server can access the HTML file and sends it directly to the user, HTML files are not passed to the PHP interpreter. When the backend is requested, the web server has access to its file and summons the PHP interpreter. PHP, under a different user, can't read the file and this stall results in an error 500. To solve this issue you can either change the user and/or group executing PHP or change the permissions of the PHP files to something less restrictive. Other solutions are possible but all of them depend on your specific environment.","title":"Error 500 when visiting the backend"},{"location":"faqs.html#save-the-avatars-to-the-disk","text":"Instead of letting the users download their avatars you may want to save them on your server. This can be easily accomplished but it requires some coding on your part. In the past, we have tried to come up with a solution to avoid this necessity but due to the variety of the use cases, it was impossible to offer an always valid solution to this problem. For this reason, we have created this small but complete example that, alongside with the code reference section, should help you to achieve your desired results.","title":"Save the avatars to the disk"},{"location":"faqs.html#step-1","text":"Open the configuration file and the the renderer_format key to png_saved (or any other _saved option ). This step will tell the UI that the avatar won't be download and it will display a different loading screen. public $renderer_format = \"png_saved\";","title":"Step 1"},{"location":"faqs.html#step-2","text":"Open the avatarmaker.php file and apport the following changes Insert this code $saveFolder = \"yourfolder/\"; $avatarName = md5( microtime(true) ) . \".png\"; After $avatarMaker = new HT_AvatarMaker();","title":"Step 2"},{"location":"faqs.html#step-3","text":"Replace every estance of $avatarMaker->renderAvatar( ); With this code $avatarMaker->renderAvatar( $saveFolder . $avatarName ); From now on, all the generated avatars will be saved on the server with a random name. This is not very useful in itself but it should be easy to modify to suit your needs. If you need further assistance don't hesitate to contact us.","title":"Step 3"},{"location":"faqs.html#custom-previews-for-each-items","text":"Right now there is no easy way to add custom previews for the items. We are working to add this functionality in future releases. Right now you can obtain this result by manually editing the cache files but, although this works, it is not recommended as the cache may be regenerated and the changes lost.","title":"Custom previews for each items"},{"location":"faqs.html#what-are-webpackconfigjs-postcssconfigjs-and-packagejs","text":"Webpack is a javascript build tool, it allows developers to use more modern technologies like sass and es6 even if the browser can't understand them by compiling them to standard CSS and javascript. We have included all the development files and tools to ease the customization and extension of the AvatarMaker. When running Webpack in development, all modifications to the source files are automatically compiled and written over the distribution files. Beware that the development versions of the compiled files are not minified and should not be used in production. Although explaining how Webpack works, is outside the scope of this document, we will give here a list of steps and commands to execute that will allow you to use it without any prior knowledge. For a more detailed explanation of how it works, please refer to the project website. Webpack website Note Using Webpack is not mandatory to run the application, we included it for convenience in case you want to customize the AM. Before installing Webpack you need to install Node.JS - Official Download Run the following commands in the root directory of your project. # Install grunt npm install -g webpack webpack-cli # Install the dependencies npm install # Run webpack in development mode npm run start:dev # Prepare the release ready files npm run build Note You will find a new folder (node_modules) inside the avatarMaker directory. It's needed for Webpack to work properly but you it should not be uploaded. The files inside it are used during development only.","title":"What are webpack.config.js, postcss.config.js and package.js?"},{"location":"faqs.html#gdpr-and-external-cdns","text":"Before version 3.2 the avatarMaker used external CDNs for web fonts and libraries. This choice made the loading of the interface a bit faster and it did not present any concern before the adoption of the GDPR (General Data Protection Regulation). With this new regulation, all website owners have to specify what data they collect, how they store it and give the user the ability to opt-out. As an example, Google Fonts acts as a \"data controller\" forcing every website owner to specify its use in their privacy polices and the miscommunication may lead to legal issues. We have decided to remove every dependency to external services eliminating the issue at its roo. The avatarMaker now doesn't collect ANY data, being it identifiable or anonymous, nor it relies on external services that may collect information about the user. * With this choice, the final user avoids any risk of fines or legal actions. \"What about the loading times of the interface?\" you may ask... After the first loading of the page, there is no difference. If you concerned about the millisecond delay this change may introduce you can easily edit the avatar maker source code to reintroduce the CDNs.","title":"GDPR and external CDNs"},{"location":"faqs.html#edit-a-previously-saved-avatar","text":"From version 3.2.2 you can now edit previously generated avatars in the UI. The initialization JS method now accepts an optional parameter. You pass to the UI a JSON string or object containing the structure of the avatar to load. You have to save the avatar tree before rendering the avatar in the backend as you can't edit the final image in any way. $( \"#avmContainer\" ).avatarMaker('avatarmaker.php', 'JSON HERE');","title":"Edit a previously saved avatar"},{"location":"language.html","text":"Custom Language \u00b6 If your language is not available between the supplied ones, you can translate the avatarMaker by yourself and it will take just a couple of minutes. To create a new translation file simply copy and paste an existing one inside the local directory renaming it as you want. The naming scheme followed is to name the file using the iso code of the language. Languages are held in simple PHP files that can be edited with any text editor we recommend notepad++ on windows. Once opened you should be presented with something like this: return array( 'sm_random' => 'Random', 'sm_download' => 'Download', 'sm_credits' => 'Avatar Maker by', 'dw_preparing' => 'We are creating your avatar!', 'dw_wait' => 'Please wait...', 'tm_head' => 'Head', 'tm_ears' => 'Ears', 'tm_eyes' => 'Eyes', 'tm_eyebrows' => 'Eyebrows', 'tm_nose' => 'Nose', 'tm_mouth' => 'Mouth', 'tm_hair' => 'Hair', 'tm_objects' => 'Objects', 'tm_background' => 'Background', 'cm_colors' => 'Colors' ); Translate the phrases contained in the values of the array and save the file. Now you can update the configuration file to use of your new language. Warning Due to the caching system used by the avatarMaker, after updating or creating a language file you must manually clear the cache folder (Do not delete the folder itself) or the changes will be ignored.","title":"Custom Language"},{"location":"language.html#custom-language","text":"If your language is not available between the supplied ones, you can translate the avatarMaker by yourself and it will take just a couple of minutes. To create a new translation file simply copy and paste an existing one inside the local directory renaming it as you want. The naming scheme followed is to name the file using the iso code of the language. Languages are held in simple PHP files that can be edited with any text editor we recommend notepad++ on windows. Once opened you should be presented with something like this: return array( 'sm_random' => 'Random', 'sm_download' => 'Download', 'sm_credits' => 'Avatar Maker by', 'dw_preparing' => 'We are creating your avatar!', 'dw_wait' => 'Please wait...', 'tm_head' => 'Head', 'tm_ears' => 'Ears', 'tm_eyes' => 'Eyes', 'tm_eyebrows' => 'Eyebrows', 'tm_nose' => 'Nose', 'tm_mouth' => 'Mouth', 'tm_hair' => 'Hair', 'tm_objects' => 'Objects', 'tm_background' => 'Background', 'cm_colors' => 'Colors' ); Translate the phrases contained in the values of the array and save the file. Now you can update the configuration file to use of your new language. Warning Due to the caching system used by the avatarMaker, after updating or creating a language file you must manually clear the cache folder (Do not delete the folder itself) or the changes will be ignored.","title":"Custom Language"},{"location":"quick-start.html","text":"Quick Start \u00b6 Before using the AvatarMaker you need to upload the content of the UPLOAD folder on your server. This process is very easy and you can use any ftp client or web interface supported by your hosting provider. Standalone \u00b6 You can run the application without editing a single line of code just open the browser and navigate to yoursite.tld/UPLOADFOLDER/ . You should now see the interface of the AvatarMaker. In this configuration, once a user has created its avatar it will be download in png format. Note Make sure that the permissions for the cache folder are correctly set, refer to this FAQ: Permissions errors Embedded \u00b6 If you want to include the AvatarMaker inside an existing page, you can embed it using an iframe. This approach is used by websites like youtube for their embedded player. Assuming that you have uploaded the app to yoursite.tld/UPLOADFOLDER/ The code below will create an iframe 900px wide by 600px high. <iframe width=\"900\" height=\"600\" src=\"yoursite.tld/UPLOADFOLDER/\" frameborder=\"0\" allowfullscreen></iframe> Although the previous code works fine it is not well suited for responsive website, as the fixed measures of the iframe will break your design. An easy fix is to make the iframe responsive, it will take up all the available space in the parent element and it will scale down accordingly. Other implementations like asynchronously loading the content of the app page will not work. First Run \u00b6 Regardless of the above choice, the first time the app il loaded (or any other time the cache is emptied) the backend will take care of creating a cached copy of all the available items, as well as preparing an appropriate configuration file for the frontend. For this reason, the first run could be a bit slow and resource intensive especially on shared hosting. All the subsequent requests will be served from cache, speeding up the process. Warning Because the cache is not revalidated at each request, if you alter the content of the assets folder you need to manually empty the cache before being able to see the differences. Congratulations! Your avatarMaker is now ready to be enjoyed by your users. This is all you have to do for a basic implementation of the app.","title":"Quick Start"},{"location":"quick-start.html#quick-start","text":"Before using the AvatarMaker you need to upload the content of the UPLOAD folder on your server. This process is very easy and you can use any ftp client or web interface supported by your hosting provider.","title":"Quick Start"},{"location":"quick-start.html#standalone","text":"You can run the application without editing a single line of code just open the browser and navigate to yoursite.tld/UPLOADFOLDER/ . You should now see the interface of the AvatarMaker. In this configuration, once a user has created its avatar it will be download in png format. Note Make sure that the permissions for the cache folder are correctly set, refer to this FAQ: Permissions errors","title":"Standalone"},{"location":"quick-start.html#embedded","text":"If you want to include the AvatarMaker inside an existing page, you can embed it using an iframe. This approach is used by websites like youtube for their embedded player. Assuming that you have uploaded the app to yoursite.tld/UPLOADFOLDER/ The code below will create an iframe 900px wide by 600px high. <iframe width=\"900\" height=\"600\" src=\"yoursite.tld/UPLOADFOLDER/\" frameborder=\"0\" allowfullscreen></iframe> Although the previous code works fine it is not well suited for responsive website, as the fixed measures of the iframe will break your design. An easy fix is to make the iframe responsive, it will take up all the available space in the parent element and it will scale down accordingly. Other implementations like asynchronously loading the content of the app page will not work.","title":"Embedded"},{"location":"quick-start.html#first-run","text":"Regardless of the above choice, the first time the app il loaded (or any other time the cache is emptied) the backend will take care of creating a cached copy of all the available items, as well as preparing an appropriate configuration file for the frontend. For this reason, the first run could be a bit slow and resource intensive especially on shared hosting. All the subsequent requests will be served from cache, speeding up the process. Warning Because the cache is not revalidated at each request, if you alter the content of the assets folder you need to manually empty the cache before being able to see the differences. Congratulations! Your avatarMaker is now ready to be enjoyed by your users. This is all you have to do for a basic implementation of the app.","title":"First Run"},{"location":"skins.html","text":"Skins \u00b6 The avatarMaker comes with a highly customizable skin entirely written in scss. You can use it as it is or as a base to build your own. Attention The AvatarMaker *used to ship with 4 different skins. Due to the low interest showed buy the community we removed them to focus on improving the base one. Custom skins \u00b6 Because the base skin is written in scss, you can change all the colors and some sizes by editing some variables without touching a single line of code. In the base.scss file inside the source/app/scss folder you can find 45 individual variables the content of which will determine the look of the skin. This file is fully commented and each variable has a name easy to link with its function. For your convenience here are some naming conventions: Variable Name Effect * - background Change the background color * - color change the text color * - border Change the border color * - * - hover Set the color of the corresponding style element on mouse over As an example $sidebar-menu-background-hover controls the background color of the sidebar menu items when the mouse cursor is over them.","title":"Skins"},{"location":"skins.html#skins","text":"The avatarMaker comes with a highly customizable skin entirely written in scss. You can use it as it is or as a base to build your own. Attention The AvatarMaker *used to ship with 4 different skins. Due to the low interest showed buy the community we removed them to focus on improving the base one.","title":"Skins"},{"location":"skins.html#custom-skins","text":"Because the base skin is written in scss, you can change all the colors and some sizes by editing some variables without touching a single line of code. In the base.scss file inside the source/app/scss folder you can find 45 individual variables the content of which will determine the look of the skin. This file is fully commented and each variable has a name easy to link with its function. For your convenience here are some naming conventions: Variable Name Effect * - background Change the background color * - color change the text color * - border Change the border color * - * - hover Set the color of the corresponding style element on mouse over As an example $sidebar-menu-background-hover controls the background color of the sidebar menu items when the mouse cursor is over them.","title":"Custom skins"}]}